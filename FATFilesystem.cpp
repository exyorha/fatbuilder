#include "FATFilesystem.h"
#include "IBlockDevice.h"

#include <time.h>

#include <string>
#include <sstream>
#include <unordered_map>
#include <stdexcept>

const unsigned char FATFilesystem::m_mbrCode[512]{
    0x33, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0xfb, 0x50, 0x07, 0x50, 0x1f, 0xfc, 0xbe, 0x1b, 0x7c,
    0xbf, 0x1b, 0x06, 0x50, 0x57, 0xb9, 0xe5, 0x01, 0xf3, 0xa4, 0xcb, 0xbe, 0xbe, 0x07, 0xb1, 0x04,
    0x38, 0x2c, 0x7c, 0x09, 0x75, 0x15, 0x83, 0xc6, 0x10, 0xe2, 0xf5, 0xcd, 0x18, 0x8b, 0x14, 0x8b,
    0xee, 0x83, 0xc6, 0x10, 0x49, 0x74, 0x16, 0x38, 0x2c, 0x74, 0xf6, 0xbe, 0x10, 0x07, 0x4e, 0xac,
    0x3c, 0x00, 0x74, 0xfa, 0xbb, 0x07, 0x00, 0xb4, 0x0e, 0xcd, 0x10, 0xeb, 0xf2, 0x89, 0x46, 0x25,
    0x96, 0x8a, 0x46, 0x04, 0xb4, 0x06, 0x3c, 0x0e, 0x74, 0x11, 0xb4, 0x0b, 0x3c, 0x0c, 0x74, 0x05,
    0x3a, 0xc4, 0x75, 0x2b, 0x40, 0xc6, 0x46, 0x25, 0x06, 0x75, 0x24, 0xbb, 0xaa, 0x55, 0x50, 0xb4,
    0x41, 0xcd, 0x13, 0x58, 0x72, 0x16, 0x81, 0xfb, 0x55, 0xaa, 0x75, 0x10, 0xf6, 0xc1, 0x01, 0x74,
    0x0b, 0x8a, 0xe0, 0x88, 0x56, 0x24, 0xc7, 0x06, 0xa1, 0x06, 0xeb, 0x1e, 0x88, 0x66, 0x04, 0xbf,
    0x0a, 0x00, 0xb8, 0x01, 0x02, 0x8b, 0xdc, 0x33, 0xc9, 0x83, 0xff, 0x05, 0x7f, 0x03, 0x8b, 0x4e,
    0x25, 0x03, 0x4e, 0x02, 0xcd, 0x13, 0x72, 0x29, 0xbe, 0x0f, 0x07, 0x81, 0x3e, 0xfe, 0x7d, 0x55,
    0xaa, 0x74, 0x5a, 0x83, 0xef, 0x05, 0x7f, 0xda, 0x85, 0xf6, 0x75, 0x83, 0xbe, 0x0f, 0x07, 0xeb,
    0x8a, 0x98, 0x91, 0x52, 0x99, 0x03, 0x46, 0x08, 0x13, 0x56, 0x0a, 0xe8, 0x12, 0x00, 0x5a, 0xeb,
    0xd5, 0x4f, 0x74, 0xe4, 0x33, 0xc0, 0xcd, 0x13, 0xeb, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x56, 0x33, 0xf6, 0x56, 0x56, 0x52, 0x50, 0x06, 0x53, 0x51, 0xbe, 0x10, 0x00, 0x56, 0x8b, 0xf4,
    0x50, 0x52, 0xb8, 0x00, 0x42, 0x8a, 0x56, 0x24, 0xcd, 0x13, 0x5a, 0x58, 0x8d, 0x64, 0x10, 0x72,
    0x0a, 0x40, 0x75, 0x01, 0x42, 0x80, 0xc7, 0x02, 0xe2, 0xf7, 0xf8, 0x5e, 0xc3, 0xeb, 0x74, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x8b, 0xfc, 0x1e, 0x57, 0x8b, 0xf5, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
};

const unsigned char FATFilesystem::m_pbrCode_12_16[512]{
    0xeb, 0x3c, 0x90, 0x4d, 0x53, 0x57, 0x49, 0x4e, 0x34, 0x2e, 0x31, 0x00, 0x02, 0x08, 0x01, 0x00,
    0x02, 0x00, 0x02, 0x03, 0x51, 0xf8, 0x08, 0x00, 0x11, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x4f, 0x20, 0x4e, 0x41,
    0x4d, 0x45, 0x20, 0x20, 0x20, 0x20, 0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x33, 0xc9,
    0x8e, 0xd1, 0xbc, 0xfc, 0x7b, 0x16, 0x07, 0xbd, 0x78, 0x00, 0xc5, 0x76, 0x00, 0x1e, 0x56, 0x16,
    0x55, 0xbf, 0x22, 0x05, 0x89, 0x7e, 0x00, 0x89, 0x4e, 0x02, 0xb1, 0x0b, 0xfc, 0xf3, 0xa4, 0x06,
    0x1f, 0xbd, 0x00, 0x7c, 0xc6, 0x45, 0xfe, 0x0f, 0x38, 0x4e, 0x24, 0x7d, 0x20, 0x8b, 0xc1, 0x99,
    0xe8, 0x7e, 0x01, 0x83, 0xeb, 0x3a, 0x66, 0xa1, 0x1c, 0x7c, 0x66, 0x3b, 0x07, 0x8a, 0x57, 0xfc,
    0x75, 0x06, 0x80, 0xca, 0x02, 0x88, 0x56, 0x02, 0x80, 0xc3, 0x10, 0x73, 0xed, 0x33, 0xc9, 0xfe,
    0x06, 0xd8, 0x7d, 0x8a, 0x46, 0x10, 0x98, 0xf7, 0x66, 0x16, 0x03, 0x46, 0x1c, 0x13, 0x56, 0x1e,
    0x03, 0x46, 0x0e, 0x13, 0xd1, 0x8b, 0x76, 0x11, 0x60, 0x89, 0x46, 0xfc, 0x89, 0x56, 0xfe, 0xb8,
    0x20, 0x00, 0xf7, 0xe6, 0x8b, 0x5e, 0x0b, 0x03, 0xc3, 0x48, 0xf7, 0xf3, 0x01, 0x46, 0xfc, 0x11,
    0x4e, 0xfe, 0x61, 0xbf, 0x00, 0x07, 0xe8, 0x28, 0x01, 0x72, 0x3e, 0x38, 0x2d, 0x74, 0x17, 0x60,
    0xb1, 0x0b, 0xbe, 0xd8, 0x7d, 0xf3, 0xa6, 0x61, 0x74, 0x3d, 0x4e, 0x74, 0x09, 0x83, 0xc7, 0x20,
    0x3b, 0xfb, 0x72, 0xe7, 0xeb, 0xdd, 0xfe, 0x0e, 0xd8, 0x7d, 0x7b, 0xa7, 0xbe, 0x7f, 0x7d, 0xac,
    0x98, 0x03, 0xf0, 0xac, 0x98, 0x40, 0x74, 0x0c, 0x48, 0x74, 0x13, 0xb4, 0x0e, 0xbb, 0x07, 0x00,
    0xcd, 0x10, 0xeb, 0xef, 0xbe, 0x82, 0x7d, 0xeb, 0xe6, 0xbe, 0x80, 0x7d, 0xeb, 0xe1, 0xcd, 0x16,
    0x5e, 0x1f, 0x66, 0x8f, 0x04, 0xcd, 0x19, 0xbe, 0x81, 0x7d, 0x8b, 0x7d, 0x1a, 0x8d, 0x45, 0xfe,
    0x8a, 0x4e, 0x0d, 0xf7, 0xe1, 0x03, 0x46, 0xfc, 0x13, 0x56, 0xfe, 0xb1, 0x04, 0xe8, 0xc2, 0x00,
    0x72, 0xd7, 0xea, 0x00, 0x02, 0x70, 0x00, 0x52, 0x50, 0x06, 0x53, 0x6a, 0x01, 0x6a, 0x10, 0x91,
    0x8b, 0x46, 0x18, 0xa2, 0x26, 0x05, 0x96, 0x92, 0x33, 0xd2, 0xf7, 0xf6, 0x91, 0xf7, 0xf6, 0x42,
    0x87, 0xca, 0xf7, 0x76, 0x1a, 0x8a, 0xf2, 0x8a, 0xe8, 0xc0, 0xcc, 0x02, 0x0a, 0xcc, 0xb8, 0x01,
    0x02, 0x80, 0x7e, 0x02, 0x0e, 0x75, 0x04, 0xb4, 0x42, 0x8b, 0xf4, 0x8a, 0x56, 0x24, 0xcd, 0x13,
    0x61, 0x61, 0x72, 0x0a, 0x40, 0x75, 0x01, 0x42, 0x03, 0x5e, 0x0b, 0x49, 0x75, 0x77, 0xc3, 0x03,
    0x18, 0x01, 0x27, 0x0d, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x79, 0x73,
    0x74, 0x65, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0xff, 0x0d, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x20,
    0x49, 0x2f, 0x4f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xff, 0x0d, 0x0a, 0x52, 0x65, 0x70, 0x6c,
    0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x2c, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x79,
    0x20, 0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x00, 0x00, 0x49, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x53, 0x59, 0x53, 0x4d, 0x53, 0x44, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x7f, 0x01,
    0x00, 0x41, 0xbb, 0x00, 0x07, 0x60, 0x66, 0x6a, 0x00, 0xe9, 0x3b, 0xff, 0x00, 0x00, 0x55, 0xaa
};

const unsigned char FATFilesystem::m_pbrCode_32[1536]{
    0xeb, 0x58, 0x90, 0x4d, 0x53, 0x57, 0x49, 0x4e, 0x34, 0x2e, 0x31, 0x00, 0x02, 0x02, 0x08, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x11, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x20, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x4f, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x20,
    0x20, 0x20, 0x46, 0x41, 0x54, 0x33, 0x32, 0x20, 0x20, 0x20, 0xfa, 0x33, 0xc9, 0x8e, 0xd1, 0xbc,
    0xf8, 0x7b, 0x8e, 0xc1, 0xbd, 0x78, 0x00, 0xc5, 0x76, 0x00, 0x1e, 0x56, 0x16, 0x55, 0xbf, 0x22,
    0x05, 0x89, 0x7e, 0x00, 0x89, 0x4e, 0x02, 0xb1, 0x0b, 0xfc, 0xf3, 0xa4, 0x8e, 0xd9, 0xbd, 0x00,
    0x7c, 0xc6, 0x45, 0xfe, 0x0f, 0x8b, 0x46, 0x18, 0x88, 0x45, 0xf9, 0x38, 0x4e, 0x40, 0x7d, 0x25,
    0x8b, 0xc1, 0x99, 0xbb, 0x00, 0x07, 0xe8, 0x97, 0x00, 0x72, 0x1a, 0x83, 0xeb, 0x3a, 0x66, 0xa1,
    0x1c, 0x7c, 0x66, 0x3b, 0x07, 0x8a, 0x57, 0xfc, 0x75, 0x06, 0x80, 0xca, 0x02, 0x88, 0x56, 0x02,
    0x80, 0xc3, 0x10, 0x73, 0xed, 0xbf, 0x02, 0x00, 0x83, 0x7e, 0x16, 0x00, 0x75, 0x45, 0x8b, 0x46,
    0x1c, 0x8b, 0x56, 0x1e, 0xb9, 0x03, 0x00, 0x49, 0x40, 0x75, 0x01, 0x42, 0xbb, 0x00, 0x7e, 0xe8,
    0x5f, 0x00, 0x73, 0x26, 0xb0, 0xf8, 0x4f, 0x74, 0x1d, 0x8b, 0x46, 0x32, 0x33, 0xd2, 0xb9, 0x03,
    0x00, 0x3b, 0xc8, 0x77, 0x1e, 0x8b, 0x76, 0x0e, 0x3b, 0xce, 0x73, 0x17, 0x2b, 0xf1, 0x03, 0x46,
    0x1c, 0x13, 0x56, 0x1e, 0xeb, 0xd1, 0x73, 0x0b, 0xeb, 0x27, 0x83, 0x7e, 0x2a, 0x00, 0x77, 0x03,
    0xe9, 0xfd, 0x02, 0xbe, 0x7e, 0x7d, 0xac, 0x98, 0x03, 0xf0, 0xac, 0x84, 0xc0, 0x74, 0x17, 0x3c,
    0xff, 0x74, 0x09, 0xb4, 0x0e, 0xbb, 0x07, 0x00, 0xcd, 0x10, 0xeb, 0xee, 0xbe, 0x81, 0x7d, 0xeb,
    0xe5, 0xbe, 0x7f, 0x7d, 0xeb, 0xe0, 0x98, 0xcd, 0x16, 0x5e, 0x1f, 0x66, 0x8f, 0x04, 0xcd, 0x19,
    0x41, 0x56, 0x66, 0x6a, 0x00, 0x52, 0x50, 0x06, 0x53, 0x6a, 0x01, 0x6a, 0x10, 0x8b, 0xf4, 0x60,
    0x80, 0x7e, 0x02, 0x0e, 0x75, 0x04, 0xb4, 0x42, 0xeb, 0x1d, 0x91, 0x92, 0x33, 0xd2, 0xf7, 0x76,
    0x18, 0x91, 0xf7, 0x76, 0x18, 0x42, 0x87, 0xca, 0xf7, 0x76, 0x1a, 0x8a, 0xf2, 0x8a, 0xe8, 0xc0,
    0xcc, 0x02, 0x0a, 0xcc, 0xb8, 0x01, 0x02, 0x8a, 0x56, 0x40, 0xcd, 0x13, 0x61, 0x8d, 0x64, 0x10,
    0x5e, 0x72, 0x0a, 0x40, 0x75, 0x01, 0x42, 0x03, 0x5e, 0x0b, 0x49, 0x75, 0xb4, 0xc3, 0x03, 0x18,
    0x01, 0x27, 0x0d, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x79, 0x73, 0x74,
    0x65, 0x6d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0xff, 0x0d, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x49,
    0x2f, 0x4f, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xff, 0x0d, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61,
    0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x2c, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20,
    0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x49, 0x4f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x53, 0x59, 0x53, 0x4d, 0x53, 0x44, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53, 0x7e, 0x01,
    0x00, 0x57, 0x49, 0x4e, 0x42, 0x4f, 0x4f, 0x54, 0x20, 0x53, 0x59, 0x53, 0x00, 0x00, 0x55, 0xaa,
    0x52, 0x52, 0x61, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x72, 0x72, 0x41, 0x61, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa,
    0xfa, 0x66, 0x0f, 0xb6, 0x46, 0x10, 0x66, 0x8b, 0x4e, 0x24, 0x66, 0xf7, 0xe1, 0x66, 0x03, 0x46,
    0x1c, 0x66, 0x0f, 0xb7, 0x56, 0x0e, 0x66, 0x03, 0xc2, 0x33, 0xc9, 0x66, 0x89, 0x46, 0xfc, 0x66,
    0xc7, 0x46, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x66, 0x8b, 0x46, 0x2c, 0x66, 0x83, 0xf8, 0x02,
    0x0f, 0x82, 0xcf, 0xfc, 0x66, 0x3d, 0xf8, 0xff, 0xff, 0x0f, 0x0f, 0x83, 0xc5, 0xfc, 0x66, 0x0f,
    0xa4, 0xc2, 0x10, 0xfb, 0x52, 0x50, 0xfa, 0x66, 0xc1, 0xe0, 0x10, 0x66, 0x0f, 0xac, 0xd0, 0x10,
    0x66, 0x83, 0xe8, 0x02, 0x66, 0x0f, 0xb6, 0x5e, 0x0d, 0x8b, 0xf3, 0x66, 0xf7, 0xe3, 0x66, 0x03,
    0x46, 0xfc, 0x66, 0x0f, 0xa4, 0xc2, 0x10, 0xfb, 0xbb, 0x00, 0x07, 0x8b, 0xfb, 0xb9, 0x01, 0x00,
    0xe8, 0xbe, 0xfc, 0x0f, 0x82, 0xaa, 0xfc, 0x38, 0x2d, 0x74, 0x1e, 0xb1, 0x0b, 0x56, 0xbe, 0xd8,
    0x7d, 0xf3, 0xa6, 0x5e, 0x74, 0x19, 0x03, 0xf9, 0x83, 0xc7, 0x15, 0x3b, 0xfb, 0x72, 0xe8, 0x4e,
    0x75, 0xd6, 0x58, 0x5a, 0xe8, 0x66, 0x00, 0x72, 0xab, 0x83, 0xc4, 0x04, 0xe9, 0x64, 0xfc, 0x83,
    0xc4, 0x04, 0x8b, 0x75, 0x09, 0x8b, 0x7d, 0x0f, 0x8b, 0xc6, 0xfa, 0x66, 0xc1, 0xe0, 0x10, 0x8b,
    0xc7, 0x66, 0x83, 0xf8, 0x02, 0x72, 0x3b, 0x66, 0x3d, 0xf8, 0xff, 0xff, 0x0f, 0x73, 0x33, 0x66,
    0x48, 0x66, 0x48, 0x66, 0x0f, 0xb6, 0x4e, 0x0d, 0x66, 0xf7, 0xe1, 0x66, 0x03, 0x46, 0xfc, 0x66,
    0x0f, 0xa4, 0xc2, 0x10, 0xfb, 0xbb, 0x00, 0x07, 0x53, 0xb9, 0x04, 0x00, 0xe8, 0x52, 0xfc, 0x5b,
    0x0f, 0x82, 0x3d, 0xfc, 0x81, 0x3f, 0x4d, 0x5a, 0x75, 0x08, 0x81, 0xbf, 0x00, 0x02, 0x42, 0x4a,
    0x74, 0x06, 0xbe, 0x80, 0x7d, 0xe9, 0x0e, 0xfc, 0xea, 0x00, 0x02, 0x70, 0x00, 0x03, 0xc0, 0x13,
    0xd2, 0x03, 0xc0, 0x13, 0xd2, 0xe8, 0x18, 0x00, 0xfa, 0x26, 0x66, 0x8b, 0x01, 0x66, 0x25, 0xff,
    0xff, 0xff, 0x0f, 0x66, 0x0f, 0xa4, 0xc2, 0x10, 0x66, 0x3d, 0xf8, 0xff, 0xff, 0x0f, 0xfb, 0xc3,
    0xbf, 0x00, 0x7e, 0xfa, 0x66, 0xc1, 0xe0, 0x10, 0x66, 0x0f, 0xac, 0xd0, 0x10, 0x66, 0x0f, 0xb7,
    0x4e, 0x0b, 0x66, 0x33, 0xd2, 0x66, 0xf7, 0xf1, 0x66, 0x3b, 0x46, 0xf8, 0x74, 0x44, 0x66, 0x89,
    0x46, 0xf8, 0x66, 0x03, 0x46, 0x1c, 0x66, 0x0f, 0xb7, 0x4e, 0x0e, 0x66, 0x03, 0xc1, 0x66, 0x0f,
    0xb7, 0x5e, 0x28, 0x83, 0xe3, 0x0f, 0x74, 0x16, 0x3a, 0x5e, 0x10, 0x0f, 0x83, 0xa4, 0xfb, 0x52,
    0x66, 0x8b, 0xc8, 0x66, 0x8b, 0x46, 0x24, 0x66, 0xf7, 0xe3, 0x66, 0x03, 0xc1, 0x5a, 0x52, 0x66,
    0x0f, 0xa4, 0xc2, 0x10, 0xfb, 0x8b, 0xdf, 0xb9, 0x01, 0x00, 0xe8, 0xb4, 0xfb, 0x5a, 0x0f, 0x82,
    0x9f, 0xfb, 0xfb, 0x8b, 0xda, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
};

std::array<FATFilesystem *, 10> FATFilesystem::AllocatedDriveNumber::m_allocatedDrives;

FATFilesystem::AllocatedDriveNumber::AllocatedDriveNumber(FATFilesystem *owner) {
	for (size_t index = 0; index < m_allocatedDrives.size(); index++) {
		if (!m_allocatedDrives[index]) {
			m_allocatedDrives[index] = owner;
			m_driveNumber = index;
			return;
		}
	}

	throw std::runtime_error("too many FAT drives");
}

FATFilesystem::AllocatedDriveNumber::~AllocatedDriveNumber() {
	m_allocatedDrives[m_driveNumber] = nullptr;
}

FATFilesystem::FATFilesystem(std::unique_ptr<IBlockDevice>&& storage) : m_driveNumber(this), m_storage(std::move(storage)) {
	static const LBA_t plist[2] = { 100, 0 };

	translateError(f_mkfs(pathToPartition().c_str(), nullptr, m_workArea, sizeof(m_workArea)));

	installBootCode();

	translateError(f_mount(&m_fs, pathToPartition().c_str(), 1));
}

FATFilesystem::~FATFilesystem() {
	f_mount(nullptr, pathToPartition().c_str(), 0);
}

void FATFilesystem::translateError(FRESULT result) {
	if (result != FR_OK)
		throw std::runtime_error("fatfs call failed with status " + std::to_string(result));
}

void FATFilesystem::installBootCode() {
	if (disk_read(m_driveNumber, m_workArea, 0, 1) != RES_OK)
		throw std::runtime_error("failed to read MBR");

	memcpy(m_workArea, m_mbrCode, 446);

	m_workArea[446] = 0x80; // Mark partition as active
	m_workArea[450] = 0x0E; // Set partition type as FAT16-LBA

	auto firstBlock = *reinterpret_cast<const uint32_t*>(&m_workArea[446 + 8]);

	if (disk_write(m_driveNumber, m_workArea, 0, 1) != RES_OK)
		throw std::runtime_error("failed to rewrite MBR");

	if (disk_read(m_driveNumber, m_workArea, firstBlock, 1) != RES_OK)
		throw std::runtime_error("failed to read PBR");

	auto signature = reinterpret_cast<const char*>(&m_workArea[0x36]);

	if (strncmp(signature, "FAT32   ", 8) == 0) {
		throw std::runtime_error("FAT32 boot is not implemented yet");
	}
	else {
		auto bootCode = static_cast<const uint8_t*>(m_pbrCode_12_16);

		memcpy(&m_workArea[0], &bootCode[0], 3 + 8);
		memcpy(&m_workArea[0x3E], &bootCode[0x3E], 448);

		if (disk_write(m_driveNumber, m_workArea, firstBlock, 1) != RES_OK)
			throw std::runtime_error("failed to rewrite PBR");
	}

}

FatfsString FATFilesystem::pathToPartition(const FatfsString & path) {
	using ch = std::remove_reference<decltype(path)>::type::value_type;

	std::basic_stringstream<ch> stream;
	stream << m_driveNumber << static_cast<ch>(':') << static_cast<ch>('/');
	if (!path.empty())
		stream << path;

	auto fpath = stream.str();

	for (auto& ch : fpath) {
		if (ch == '\\')
			ch = '/';
	}

	return fpath;
}

bool FATFilesystem::createDirectory(const FatfsString& name) {
	auto path = pathToPartition(name);

	auto result = f_mkdir(path.c_str());
	if (result == FR_EXIST)
		return false;

	translateError(result);

	return true;
}

std::unique_ptr<IFile> FATFilesystem::open(const FatfsString& name, const FatfsString& mode) {
	return std::make_unique<FATFile>(this, pathToPartition(name), mode);
}

void FATFilesystem::setAttributes(const FatfsString& name, unsigned int attributes, unsigned int attributeMask) {
	translateError(f_chmod(name.c_str(), attributes, attributeMask));
}

FATFilesystem::FATFile::FATFile(FATFilesystem* parent, const FatfsString& name, const FatfsString & mode) : m_parent(parent) {
	static const std::unordered_map<FatfsString, int> modeMap{
		{ FF_T("r"), FA_READ },
		{ FF_T("r+"), FA_READ | FA_WRITE },
		{ FF_T("w"), FA_CREATE_ALWAYS | FA_WRITE },
		{ FF_T("w+"), FA_CREATE_ALWAYS | FA_WRITE | FA_READ },
		{ FF_T("a"), FA_OPEN_APPEND | FA_WRITE },
		{ FF_T("a+"), FA_OPEN_APPEND | FA_WRITE | FA_READ },
		{ FF_T("wx"), FA_CREATE_NEW | FA_WRITE },
		{ FF_T("w+x"), FA_CREATE_NEW | FA_WRITE | FA_READ }
	};

	auto it = modeMap.find(mode);
	if (it == modeMap.end())
		throw std::logic_error("unsupported mode");

	auto result = f_open(&m_file, name.c_str(), it->second);
	m_parent->translateError(result);
}

FATFilesystem::FATFile::~FATFile() {
	f_close(&m_file);
}		

int64_t FATFilesystem::FATFile::seek(int64_t offset, SeekWhence whence) {
	FSIZE_t target;

	switch (whence) {
	case SeekWhence::Begin:
		target = offset;
		break;

	case SeekWhence::Current:
		target = f_tell(&m_file) + offset;
		break;

	case SeekWhence::End:
		target = f_size(&m_file) + offset;
		break;

	default:
		throw std::logic_error("bad SeekWhence");
	}

	auto result = f_lseek(&m_file, target);
	m_parent->translateError(result);

	return target;
}

size_t FATFilesystem::FATFile::read(void* data, size_t size) {
	UINT read;

	auto result = f_read(&m_file, data, static_cast<UINT>(size), &read);
	m_parent->translateError(result);

	return  read;
}

size_t FATFilesystem::FATFile::write(const void* data, size_t size) {
	UINT written;

	auto result = f_write(&m_file, data, static_cast<UINT>(size), &written);
	m_parent->translateError(result);

	return written;
}

DWORD get_fattime(void) {
	auto timestamp = time(nullptr);
	tm parts;
#if defined(_WIN32)
	localtime_s(&parts, &timestamp);
#else
	localtime_r(&timestamp, &parts);
#endif
	return
		(((parts.tm_year - 80) & 127) << 25) |
		(((parts.tm_mon + 1) & 15) << 21) |
		((parts.tm_mday & 31) << 16) |
		((parts.tm_hour & 31) << 11) |
		((parts.tm_min & 63) << 5) |
		((parts.tm_sec / 2) & 31);
}

void* ff_memalloc(UINT msize) {
	return malloc(msize);
}

void ff_memfree(void* mblock) {
	free(mblock);
}


DSTATUS disk_initialize(BYTE pdrv) {
	return disk_status(pdrv);
}

DSTATUS disk_status(BYTE pdrv) {
	auto fs = FATFilesystem::AllocatedDriveNumber::getFS(pdrv);

	if (fs == nullptr)
		return STA_NOINIT | STA_NODISK;

	return 0;
}

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
	auto fs = FATFilesystem::AllocatedDriveNumber::getFS(pdrv);

	if (fs == nullptr)
		return RES_NOTRDY;

	fs->m_storage->read(static_cast<uint64_t>(sector) * 512, buff, static_cast<size_t>(count) * 512);

	return RES_OK;
}

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
	auto fs = FATFilesystem::AllocatedDriveNumber::getFS(pdrv);

	if (fs == nullptr)
		return RES_NOTRDY;

	fs->m_storage->write(static_cast<uint64_t>(sector) * 512, buff, static_cast<size_t>(count) * 512);

	return RES_OK;
}

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
	auto fs = FATFilesystem::AllocatedDriveNumber::getFS(pdrv);

	if (fs == nullptr)
		return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC:
		fs->m_storage->flush();
		return RES_OK;

	case GET_SECTOR_COUNT:
	{
		auto dest = static_cast<LBA_t *>(buff);
		*dest = static_cast<LBA_t>(fs->m_storage->mediaSize() / 512);
		return RES_OK;
	}

	case GET_BLOCK_SIZE:
	{
		auto dest = static_cast<DWORD*>(buff);
		*dest = static_cast<DWORD>(fs->m_storage->allocationUnit() / 512);
		return RES_OK;
	}
	default:
		return RES_PARERR;
	}
}

